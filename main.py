
import os
import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, WebAppInfo, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes, MessageHandler, filters
from dotenv import load_dotenv
import threading
from flask import Flask, render_template
import requests
import time

# Load environment variables
load_dotenv()

# Disable ALL logging to reduce console noise
logging.getLogger('telegram').setLevel(logging.CRITICAL)
logging.getLogger('httpx').setLevel(logging.CRITICAL)
logging.getLogger('werkzeug').setLevel(logging.CRITICAL)
logging.getLogger('urllib3').setLevel(logging.CRITICAL)
logging.disable(logging.WARNING)

# Get bot token
BOT_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')

# Flask app for the web interface
app = Flask(__name__)

@app.route('/')
def index():
    return render_template('index.html')

@app.route('/health')
def health():
    return {"status": "OK", "message": "Bot is running"}

def keep_alive():
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞ 24/7 (—Ç–æ–ª—å–∫–æ –¥–ª—è dev)"""
    time.sleep(30)  # –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞ Flask
    while True:
        try:
            # –í Replit –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤–Ω–µ—à–Ω–∏–π URL –≤–º–µ—Å—Ç–æ localhost
            import os
            repl_url = f"https://{os.getenv('REPL_SLUG', 'localhost')}.{os.getenv('REPL_OWNER', 'replit')}.repl.co/health"
            requests.get(repl_url, timeout=5)
        except:
            pass
        time.sleep(300)  # –£–≤–µ–ª–∏—á–∏–ª–∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ —Ä–µ—Å—É—Ä—Å–æ–≤

# Telegram bot handlers
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Start command handler with cool greeting and navigation button"""
    try:
        user = update.effective_user
        chat_id = update.effective_chat.id

        # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        try:
            for i in range(1, 6):  # –£–º–µ–Ω—å—à–∏–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫
                try:
                    await context.bot.delete_message(
                        chat_id=chat_id, 
                        message_id=update.message.message_id - i
                    )
                except:
                    break  # –ü—Ä–µ—Ä—ã–≤–∞–µ–º –ø—Ä–∏ –ø–µ—Ä–≤–æ–π –æ—à–∏–±–∫–µ
        except:
            pass

        greeting_text = f"–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É \"–ó–ê–ü–£–°–ö\", —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –≤—Å—é –Ω—É–∂–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—éüòé"

        # Create web app button (inline)
        inline_keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("üöÄ –ó–ê–ü–£–°–ö", web_app=WebAppInfo(url="https://code891.github.io/TAMBI/"))]
        ])

        # Create persistent keyboard (reply keyboard)
        reply_keyboard = ReplyKeyboardMarkup([
            [KeyboardButton("üîÑ –°–¢–ê–†–¢")]
        ], resize_keyboard=True, one_time_keyboard=False)

        await update.message.reply_text(
            text=greeting_text,
            reply_markup=inline_keyboard,
            parse_mode='HTML'
        )

        # Send second message with persistent keyboard
        await context.bot.send_message(
            chat_id=chat_id,
            text="üëá –ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞:",
            reply_markup=reply_keyboard
        )
    except Exception as e:
        # –£–ª—É—á—à–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
        try:
            await update.message.reply_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑")
        except:
            pass

async def restart_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle restart button callback"""
    try:
        query = update.callback_query
        await query.answer()

        chat_id = query.message.chat_id

        # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        try:
            for i in range(1, 6):
                try:
                    await context.bot.delete_message(
                        chat_id=chat_id, 
                        message_id=query.message.message_id - i
                    )
                except:
                    break
        except:
            pass

        greeting_text = f"–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É \"–ó–ê–ü–£–°–ö\", —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –≤—Å—é –Ω—É–∂–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—éüòé"

        # Create web app button (inline)
        inline_keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("üöÄ –ó–ê–ü–£–°–ö", web_app=WebAppInfo(url="https://code891.github.io/TAMBI/"))]
        ])

        # Create persistent keyboard (reply keyboard)
        reply_keyboard = ReplyKeyboardMarkup([
            [KeyboardButton("üîÑ –°–¢–ê–†–¢")]
        ], resize_keyboard=True, one_time_keyboard=False)

        await query.edit_message_text(
            text=greeting_text,
            reply_markup=inline_keyboard,
            parse_mode='HTML'
        )

        # Send message with persistent keyboard
        await context.bot.send_message(
            chat_id=chat_id,
            text="üëá –ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞:",
            reply_markup=reply_keyboard
        )
    except Exception as e:
        # –¢–∏—Ö–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
        pass

def run_flask():
    """Run Flask app in a separate thread"""
    try:
        app.run(host='0.0.0.0', port=5000, debug=False, use_reloader=False, threaded=True)
    except Exception as e:
        pass

async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle text messages, specifically –°–¢–ê–†–¢ button"""
    try:
        if update.message.text == "üîÑ –°–¢–ê–†–¢":
            await start(update, context)
    except Exception as e:
        pass

def main():
    """Main function to run the bot with auto-restart"""
    if not BOT_TOKEN:
        print("‚ùå TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return

    if len(BOT_TOKEN) < 40:
        print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω!")
        return

    # Start Flask app in separate thread
    flask_thread = threading.Thread(target=run_flask, daemon=True)
    flask_thread.start()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –æ–∫—Ä—É–∂–µ–Ω–∏—è
    is_deployment = os.getenv('REPLIT_DEPLOYMENT') or os.getenv('REPL_DEPLOYMENT')
    
    if not is_deployment:
        # –í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—É—Å–∫–∞–µ–º keep_alive
        keep_alive_thread = threading.Thread(target=keep_alive, daemon=True)
        keep_alive_thread.start()
        print("üõ†Ô∏è –ó–∞–ø—É—â–µ–Ω –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏")
    else:
        print("üöÄ –ó–∞–ø—É—â–µ–Ω –≤ —Ä–µ–∂–∏–º–µ Deployment - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ —Ä–∞–±–æ—Ç—ã")

    restart_count = 0
    max_restarts = 5

    while restart_count < max_restarts:
        try:
            # Create bot application
            application = Application.builder().token(BOT_TOKEN).build()

            # Add handlers
            application.add_handler(CommandHandler("start", start))
            application.add_handler(CallbackQueryHandler(restart_callback, pattern="restart"))
            application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))

            print(f"ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω! (–ø–æ–ø—ã—Ç–∫–∞ {restart_count + 1})")

            # Run the bot with proper error handling
            application.run_polling(
                drop_pending_updates=True,
                allowed_updates=["message", "callback_query"],
                close_loop=False
            )
            
            # –ï—Å–ª–∏ –¥–æ—à–ª–∏ —Å—é–¥–∞ –±–µ–∑ –æ—à–∏–±–æ–∫ - —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫
            restart_count = 0
            
        except Exception as e:
            restart_count += 1
            
            if "Conflict" in str(e):
                print("‚ö†Ô∏è –ö–û–ù–§–õ–ò–ö–¢: –î—Ä—É–≥–æ–π —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ —É–∂–µ —Ä–∞–±–æ—Ç–∞–µ—Ç!")
                print("üí° –û—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Development –≤–µ—Ä—Å–∏—é –∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ Deployment")
                break
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ #{restart_count}: {e}")
                
                if restart_count < max_restarts:
                    print(f"üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥... ({restart_count}/{max_restarts})")
                    time.sleep(10)
                else:
                    print("‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–æ–≤!")
                    break
    
    print("üõë –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

if __name__ == '__main__':
    main()
